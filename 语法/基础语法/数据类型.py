#!/usr/bin/env python
# -*- coding: UTF-8 -*-
'''
@Project ：test 
@File    ：数据类型.py
@Author  ：Administrator
@Date    ：2020/10/27 15:24 
'''

'''
标准数据类型
在内存中存储的数据可以有多种类型。
例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。
Python 定义了一些标准类型，用于存储各种类型的数据。

#***********************************************************************************************************************
标准数据类型
Python3 中有六个标准的数据类型：
Number（数字）
String（字符串）
List（列表）
Tuple（元组）
Set（集合）
Dictionary（字典）

Python3 的六个标准数据类型中：
不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；
可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。

#***********************************************************************************************************************
Number（数字）
Python3 支持 int、float、bool、complex（复数）。

#***********************************************************************************************************************
String（字符串）
Python中的字符串用单引号 ' 或双引号 " 括起来，同时使用反斜杠 \ 转义特殊字符。


#***********************************************************************************************************************
List（列表）
List（列表） 是 Python 中使用最频繁的数据类型。
列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。
列表是写在方括号 [] 之间、用逗号分隔开的元素列表。
和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。
#***********************************************************************************************************************
Tuple（元组）
元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。
#***********************************************************************************************************************
Set（集合）
集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。
基本功能是进行成员关系测试和删除重复元素。
可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。

#***********************************************************************************************************************
Dictionary（字典）
字典（dictionary）是Python中另一个非常有用的内置数据类型。
列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。
字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。
键(key)必须使用不可变类型。
在同一个字典中，键(key)必须是唯一的。
#***********************************************************************************************************************


'''
# 内置的 type() 函数可以用来查询变量所指的对象类型。

#***********************************************************************************************************************
'''
数字(Number)
Python 数字数据类型用于存储数值。
数据类型是不允许改变的,这就意味着如果改变数字数据类型的值，将重新分配内存空间。

Python 支持三种不同的数值类型：
整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。
浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）
复数( (complex)) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。
'''

# 定义一个整形变量
# age = 18
# print(type(age))

# 定义一个浮点型变量
# pi = 3.14
# print(type(pi))


# 定义一个复数变量
# c = 12 + 0.2j
# print(type(c))

# 定义一个布尔变量，布尔变量有两个值：True 和 False ，它们的值是 1 和 0，它们可以和数字相加。
# b = True
# c = False
# print(type(b))
# print(type(c))


# 内置函数isinstance(),判断变量类型,如果条件成立返回True，条件不成立返回False
# a = 9
# print(isinstance(a,int))
# print(isinstance(a,float))


# 数字类型转换
'''
有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。
int(x) 将x转换为一个整数。
float(x) 将x转换到一个浮点数。
complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。
complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。
'''

# x = 3.14  #定义浮点型变量
# print(type(x))
# print(type(int(x))) #使用内置函数int() ，把浮点型转换为整型


# x = 3  #定义整型变量
# print(type(x))
# print(type(float(x))) #使用内置函数float() ，把整型转换为浮点型


# 数字运算
# Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。表达式的语法很直白： +, -, * , /
# 注意：在不同的机器上浮点运算的结果可能会不一样。

# print(' 整数除法返回浮点型', 17 / 3)
# print('整数除法返回浮点型',17//3)
# print('％操作符返回除法的余数',17 % 3 )


# 扩展：如需获得更多内置函数。可以参考：Python数学函数


#***********************************************************************************************************************
'''
字符串
字符串是 Python 中最常用的数据类型。我们可以使用引号( ' 或 " )来创建字符串。
创建字符串很简单，只要为变量分配一个值即可。
'''

# h = 'Hello Word'
# h1 = "Hello Word"
# print(type(h),type(h1))

'''
访问字符串中的值
Python 访问子字符串，可以使用方括号 [] 来截取字符串，字符串的截取的语法格式如下：
变量[头下标:尾下标]
索引值以 0 为开始值，-1 为从末尾的开始位置。

'''

# str = "Hello Word"

# print (str)          # 输出字符串
# print (str[0:-1])    # 输出第一个到倒数第二个的所有字符
# print (str[0])       # 输出字符串第一个字符
# print(str[-1])       # 输出字符串最后一个字符
# print (str[2:5])     # 输出从第三个开始到第五个的字符
# print (str[2:])      # 输出从第三个开始的后的所有字符

# 加号 + 是字符串的连接符， 星号 * 表示复制当前字符串，与之结合的数字为复制的次数。实例如下：
# print (str * 2)      # 输出字符串两次，也可以写成 print (2 * str)
# print (str + "TEST") # 连接字符串


# Python 使用反斜杠 \ 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串：


# str = "Hello\n Word"
# str1 = r"Hello\n Word"
# print(str)
# print(str1)

'''
注意：
1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。
2、字符串可以用+运算符连接在一起，用*运算符重复。
3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。
4、Python中的字符串不能改变。
'''

# 你可以截取字符串的一部分并与其他字段拼接，如下实例：
# str = "Hello Word"
# print(str[:6]+ "Tom")


# 字符串运算符 in
# name = 'Tom'
# print(name in 'Tom')  #成员运算符 - 如果字符串中包含给定的字符返回 True
# print(name in "1")    #成员运算符 - 如果字符串中不包含给定的字符返回 False

# 字符串运算符 not in
# name = 'Tom'
# print(name not in 'Tom')  #成员运算符 - 如果字符串中不包含给定的字符返回 True
# print(name not in "1")    #成员运算符 - 如果字符串中包含给定的字符返回 False


# 字符串格式化
# print ("我叫 %s 今年 %d 岁!" % ('小明', 10))


# 三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。实例如下
# str = '''我是
# 测试工程师
# 你是
# 干啥的'''
#
# print(str)


# 字符串内建函数,

# capitalize()  首字母强制转换为大写
# str = 'hello word'
# str1 = str.capitalize()
# print(str1)

# casefold()  所有字符全部转换为小写
# str = 'HELLO'
# str1 = str.casefold()
# print(str1)

# count() 统计的次数
# str = 'HELLO'
# print(str.count('L'))

# startswith()   判断开头 满足条件返回True，不满足返回False
# endswith() 判断结尾
# str = 'HELLO'
# str1 = str.startswith("H")  #是否以x开头，
# str2 = str.endswith("b")   #是否以b结尾
# print(str1)
# print(str2)

# find() 查找,从开始往后找，找到第一个之后获取它的位置，然后结束,-1 代表没找到
# str = 'shujunweishujunwei'
# f = str.find("jun")
# print(f)

# 注意：如果需要对字符串进行处理，可以参考python内置字符串函数

#***********************************************************************************************************************

'''
List（列表）
List（列表） 是 Python 中使用最频繁的数据类型。
列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。
列表是写在方括号 [] 之间、用逗号分隔开的元素列表。
和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。
列表截取的语法格式如下：
变量[头下标:尾下标]
索引值以 0 为开始值，-1 为从末尾的开始位置。

Python 有 6 个序列的内置类型，但最常见的是列表和元组。
列表都可以进行的操作包括索引，切片，加，乘，检查成员。
'''

# list = [ 'abcd', 786 , 2.23, 'shujunwei', 70.2 ]
# tinylist = [123, 'shujunwei']
# print (list)            # 输出完整列表
# print (list[0])         # 输出列表第一个元素
# print (list[1:3])       # 从第二个开始输出到第三个元素
# print (list[2:])        # 输出从第三个元素开始的所有元素
# print (tinylist * 2)    # 输出两次列表
# print (list + tinylist) # 连接列表

# 索引也可以从尾部开始，最后一个元素的索引为 -1，往前一位为 -2，以此类推。
# print(list[-1])         #输出列表最后一个元素


'''
更新列表
与Python字符串不一样的是，列表中的元素是可以改变的：
你可以对列表的数据项进行修改或更新
'''

# list = [0,1,2,3,4,5,6,7,8,9]
# print("第9个元素为 : ",list[9])
# list[9] = 99      #修改第九个元素为99
# print("第9个元素为 : ",list[9])
# 你也可以使用 append() 方法来添加列表项



'''
删除列表元素
可以使用 del 语句来删除列表的的元素，如下实例：
'''
# list = [0,1,2,3,4,5,6,7,8,9]
# print(list)
# del list[9]     #删除第九个元素
# print(list)

# remove()方法


'''
列表脚本操作符
列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。
'''

# 查看列表长度
list = [0,1,2,3,4,5,6,7,8,9]
print(len(list))

# 元素是否存在于列表中
print(9 in  list)
print(10 in list)



#***********************************************************************************************************************
#***********************************************************************************************************************
#***********************************************************************************************************************

