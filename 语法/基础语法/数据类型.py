#!/usr/bin/env python
# -*- coding: UTF-8 -*-
'''
@Project ：test 
@File    ：数据类型.py
@Author  ：Administrator
@Date    ：2020/10/27 15:24 
'''

'''
标准数据类型
在内存中存储的数据可以有多种类型。
例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。
Python 定义了一些标准类型，用于存储各种类型的数据。

#***********************************************************************************************************************
标准数据类型
Python3 中有六个标准的数据类型：
Number（数字）
String（字符串）
List（列表）
Tuple（元组）
Set（集合）
Dictionary（字典）

Python3 的六个标准数据类型中：
不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；
可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。

#***********************************************************************************************************************
Number（数字）
Python3 支持 int、float、bool、complex（复数）。

#***********************************************************************************************************************
String（字符串）
Python中的字符串用单引号 ' 或双引号 " 括起来，同时使用反斜杠 \ 转义特殊字符。


#***********************************************************************************************************************
List（列表）
List（列表） 是 Python 中使用最频繁的数据类型。
列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。
列表是写在方括号 [] 之间、用逗号分隔开的元素列表。
和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。
#***********************************************************************************************************************
Tuple（元组）
元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。
#***********************************************************************************************************************
Set（集合）
集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。
基本功能是进行成员关系测试和删除重复元素。
可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。

#***********************************************************************************************************************
Dictionary（字典）
字典（dictionary）是Python中另一个非常有用的内置数据类型。
列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。
字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。
键(key)必须使用不可变类型。
在同一个字典中，键(key)必须是唯一的。
#***********************************************************************************************************************


'''
# 内置的 type() 函数可以用来查询变量所指的对象类型。

#***********************************************************************************************************************
'''
数字(Number)
Python 数字数据类型用于存储数值。
数据类型是不允许改变的,这就意味着如果改变数字数据类型的值，将重新分配内存空间。

Python 支持三种不同的数值类型：
整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。
浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）
复数( (complex)) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。
'''

# 定义一个整形变量
# age = 18
# print(type(age))

# 定义一个浮点型变量
# pi = 3.14
# print(type(pi))


# 定义一个复数变量
# c = 12 + 0.2j
# print(type(c))

# 定义一个布尔变量，布尔变量有两个值：True 和 False ，它们的值是 1 和 0，它们可以和数字相加。
# b = True
# c = False
# print(type(b))
# print(type(c))


# 内置函数isinstance(),判断变量类型,如果条件成立返回True，条件不成立返回False
# a = 9
# print(isinstance(a,int))
# print(isinstance(a,float))


# 数字类型转换
'''
有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。
int(x) 将x转换为一个整数。
float(x) 将x转换到一个浮点数。
complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。
complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。
'''

# x = 3.14  #定义浮点型变量
# print(type(x))
# print(type(int(x))) #使用内置函数int() ，把浮点型转换为整型


# x = 3  #定义整型变量
# print(type(x))
# print(type(float(x))) #使用内置函数float() ，把整型转换为浮点型


# 数字运算
# Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。表达式的语法很直白： +, -, * , /
# 注意：在不同的机器上浮点运算的结果可能会不一样。

# print(' 整数除法返回浮点型', 17 / 3)
# print('整数除法返回浮点型',17//3)
# print('％操作符返回除法的余数',17 % 3 )


# 扩展：如需获得更多内置函数。可以参考：Python数学函数


#***********************************************************************************************************************
'''
字符串
字符串是 Python 中最常用的数据类型。我们可以使用引号( ' 或 " )来创建字符串。
创建字符串很简单，只要为变量分配一个值即可。
'''

# h = 'Hello Word'
# h1 = "Hello Word"
# print(type(h),type(h1))

'''
访问字符串中的值
Python 访问子字符串，可以使用方括号 [] 来截取字符串，字符串的截取的语法格式如下：
变量[头下标:尾下标]
索引值以 0 为开始值，-1 为从末尾的开始位置。

'''

# str = "Hello Word"

# print (str)          # 输出字符串
# print (str[0:-1])    # 输出第一个到倒数第二个的所有字符
# print (str[0])       # 输出字符串第一个字符
# print(str[-1])       # 输出字符串最后一个字符
# print (str[2:5])     # 输出从第三个开始到第五个的字符
# print (str[2:])      # 输出从第三个开始的后的所有字符

# 加号 + 是字符串的连接符， 星号 * 表示复制当前字符串，与之结合的数字为复制的次数。实例如下：
# print (str * 2)      # 输出字符串两次，也可以写成 print (2 * str)
# print (str + "TEST") # 连接字符串


# Python 使用反斜杠 \ 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串：


# str = "Hello\n Word"
# str1 = r"Hello\n Word"
# print(str)
# print(str1)

'''
注意：
1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。
2、字符串可以用+运算符连接在一起，用*运算符重复。
3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。
4、Python中的字符串不能改变。
'''

# 你可以截取字符串的一部分并与其他字段拼接，如下实例：
# str = "Hello Word"
# print(str[:6]+ "Tom")


# 字符串运算符 in
# name = 'Tom'
# print(name in 'Tom')  #成员运算符 - 如果字符串中包含给定的字符返回 True
# print(name in "1")    #成员运算符 - 如果字符串中不包含给定的字符返回 False

# 字符串运算符 not in
# name = 'Tom'
# print(name not in 'Tom')  #成员运算符 - 如果字符串中不包含给定的字符返回 True
# print(name not in "1")    #成员运算符 - 如果字符串中包含给定的字符返回 False


# 字符串格式化
# print ("我叫 %s 今年 %d 岁!" % ('小明', 10))


# 三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。实例如下
# str = '''我是
# 测试工程师
# 你是
# 干啥的'''
#
# print(str)


# 字符串内建函数,

# capitalize()  首字母强制转换为大写
# str = 'hello word'
# str1 = str.capitalize()
# print(str1)

# casefold()  所有字符全部转换为小写
# str = 'HELLO'
# str1 = str.casefold()
# print(str1)

# count() 统计的次数
# str = 'HELLO'
# print(str.count('L'))

# startswith()   判断开头 满足条件返回True，不满足返回False
# endswith() 判断结尾
# str = 'HELLO'
# str1 = str.startswith("H")  #是否以x开头，
# str2 = str.endswith("b")   #是否以b结尾
# print(str1)
# print(str2)

# find() 查找,从开始往后找，找到第一个之后获取它的位置，然后结束,-1 代表没找到
# str = 'shujunweishujunwei'
# f = str.find("jun")
# print(f)

# 注意：如果需要对字符串进行处理，可以参考python内置字符串函数

#***********************************************************************************************************************

'''
List（列表）
List（列表） 是 Python 中使用最频繁的数据类型。
列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。
列表是写在方括号 [] 之间、用逗号分隔开的元素列表。
和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。
列表截取的语法格式如下：
变量[头下标:尾下标]
索引值以 0 为开始值，-1 为从末尾的开始位置。

Python 有 6 个序列的内置类型，但最常见的是列表和元组。
列表都可以进行的操作包括索引，切片，加，乘，检查成员。

注意：
1、List写在方括号之间，元素用逗号隔开。
2、和字符串一样，list可以被索引和切片。
3、List可以使用+操作符进行拼接。
4、List中的元素是可以改变的。

'''

# list = [ 'abcd', 786 , 2.23, 'shujunwei', 70.2 ]
# tinylist = [123, 'shujunwei']
# print (list)            # 输出完整列表
# print (list[0])         # 输出列表第一个元素
# print (list[1:3])       # 从第二个开始输出到第三个元素
# print (list[2:])        # 输出从第三个元素开始的所有元素
# print (tinylist * 2)    # 输出两次列表
# print (list + tinylist) # 连接列表

# 索引也可以从尾部开始，最后一个元素的索引为 -1，往前一位为 -2，以此类推。
# print(list[-1])         #输出列表最后一个元素


'''
更新列表
与Python字符串不一样的是，列表中的元素是可以改变的：
你可以对列表的数据项进行修改或更新
'''

# list = [0,1,2,3,4,5,6,7,8,9]
# print("第9个元素为 : ",list[9])
# list[9] = 99      #修改第九个元素为99
# print("第9个元素为 : ",list[9])
# append() 方法,在列表末尾添加新的对象
# list.append(10)
# print(list)


'''
删除列表元素
可以使用 del 语句来删除列表的的元素，如下实例：
'''
# list = [0,1,2,3,4,5,6,7,8,9]
# print(list)
# del list[9]     #删除第九个元素
# print(list)



# 列表截取与拼接

# list = [0,1,2,3,4,5,6,7,8,9,10]
# print(list[0])      #读取第1个元素
# print(list[-1])     #读取最后1个元素

# 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 9 的位置并设置为步长为 2（间隔一个位置）来截取字符串：
# print(list[1:9:2])


# 列表还支持拼接操作：x = x+1   等于  x +=1
# name += ['张三','李四']
# print(name)


# 嵌套列表,使用嵌套列表即在列表里创建其它列表，

# a = ['CN','USA','Tom']
# b = ['beijing','shanghai','guanghzou']
# s = [a,b]
# print(s)




'''
列表脚本操作符
列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。
'''


# list = [0,1,2,3,4,5,6,7,8,9,0,0,10]
# print(len(list)) # 查看列表长度
# print(max(list)) #返回列表元素最大值
# print(min(list)) #返回列表元素最小值


# 判断元素是否存在列表中，如果在列表中返回True，否则返回False
# print(9 in list)
# print(10 in list)

# 统计某个元素在列表中出现的次数
# print(list.count(0))

# 从列表中找出某个值第一个匹配项的索引位置
# print(list.index(10))

# 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
# list.pop()
# print(list)

# 移除列表中某个值的第一个匹配项
# list.remove(0)
# print(list)

# 反向列表中元素
# list.reverse()
# print(list)

# 对原列表进行排序
# list.sort()
# print(list)

# 清空列表
# list.clear()
# print(list)


# 将元组转换为列表
# print()


#***********************************************************************************************************************

'''
Tuple（元组）
元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。

'''

# tuple = ('Tom','Jack','junwei')

# print(type(tuple))


# 注意：元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：
# tup1 = (5)
# tup2 = (5,)

# print(type(tup1))
# print(type(tup2))



# 元组与字符串类似，下标索引从 0 开始，可以进行截取，组合等。

# tup3 = (0,1,2,3,4,5,6,7,8,9,5)

# 访问元组，元组可以使用下标索引来访问元组中的值
# print ("tup3[0]: ", tup3[0])
# print ("tup3[1:5]: ", tup3[1:5])


'''
修改元组
元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:
'''
# 对元组进行连接组合
# tup4 = tuple + tup3
# print(tup4)


'''
删除元组
元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:
'''

# tup5 = ('Google', 'Runoob', 1997, 2000)
# print(tup5)
# del tup5
# print("删除后的元组 tup : ",tup5)

# 以上实例元组被删除后，输出变量会有异常信息，输出如下所示：NameError: name 'tup' is not defined



# 注意：元组访问使用方式和列表一样，只是不能删除和修改元素
'''
注意：
1、与字符串一样，元组的元素不能修改。
2、元组也可以被索引和切片，方法一样。
3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。
4、元组也可以使用+操作符进行拼接。
'''


#***********************************************************************************************************************

'''
Set（集合）
集合（set）是一个无序的不重复元素序列。
集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。
基本功能是进行成员关系测试和删除重复元素。
可以使用大括号 { } 或者 set() 函数创建集合，
注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。

'''

# 创建一个集合
# name = {'Jack','Tom','junwei','Tom'}
# print(name)  # 这里演示的是去重功能

# 快速判断元素是否在集合内,返回False 或者 True
# print('junwei' in name)


'''
集合的基本操作
添加元素

'''

# 元素 x 添加到集合中，如果元素已存在，则不进行任何操作。

# name.add('junwei')  #元素已存在，则不进行任何操作
# print(name)
# name.add('Toni')   #元素不存在，成功插入
# print(name)
#
# # 还有一个方法，也可以添加元素，且参数可以是列表，元组，字典等，语法格式如下：s.update( x ) x 可以有多个，用逗号分开。
# name.update([1,2,3],[4,5,6])  # 元素是列表
# name.update((7,8,9))  # 元素是元组
# name.update({10,11,12})
# print(name)


'''
移除元素
语法格式如下：s.remove( x )
'''

# 将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。

# name.remove("junwei")
# print(name)
# name.remove('junwei')  # 不存在会发生错误:KeyError:


# 还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。格式如下所示： s.discard( x )

# name.discard('junwei')   ##不存在不会发生错误
# print(name)


# 随机删除集合中的一个元素，语法格式如下：s.pop()
# name.pop()
# print(name)

# 计算集合元素个数
# print(len(name))

# 判断元素是否在集合中存在,判断元素 x 是否在集合 s 中，存在返回 True，不存在返回 False。
# print('Tom' in name)

# 成员测试
# if 'Tom' in name :
#     print('Tom 在集合中')
# else :
#     print('Tom 不在集合中')

# 对集合更多操作，请参考集合内置方法完整列表


# 下面展示两个集合间的运算
# set可以进行集合运算
# a = set('abracadabra')
# b = set('alacazam')
# print(a)
# print(b)
# print(a - b)     # a 和 b 的差集 (集合a中包含而集合b中不包含的元素)
# print(a | b)     # a 和 b 的并集 (集合a或b中包含的所有元素)
# print(a & b)     # a 和 b 的交集 (集合a和b中都包含了的元素)
# print(a ^ b)     # a 和 b 中不同时存在的元素  (不同时包含于a和b的元素   )

#***********************************************************************************************************************

'''
Dictionary（字典）
字典（dictionary）是Python中另一个非常有用的内置数据类型。
列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。
字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。
键(key)必须使用不可变类型。
在同一个字典中，键(key)必须是唯一的。
格式如下所示：
d = {key1 : value1, key2 : value2, key3 : value3 }

'''
# dict里面的键不能重复，后面的会将前面的覆盖
# student = {'name':'Tom','age':18,'sex':'男','sex':'女'}



# 访问字典里的值，把相应的键放入到方括号中，如下实例:

# print(student['sex'])
# print(student['age'])

# 如果用字典里没有的键访问数据，会输出错误如下:KeyError


# 修改字典,向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对如下实例:
# student['age'] = 21
# print(student)


# 删除字典元素，能删单一的元素也能清空字典，清空只需一项操作。显示删除一个字典用del命令，如下实例：

# del student['name']   # 删除键 'name'
# print(student)
# student.clear()       # 清空字典
# print(student)
# del student             # 删除字典, del 操作后字典不再存在：

# 字典键的特性

# 不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，如下实例：
# dict = {'name':'Tom','name':'Jack','name':'Toni'}

# print(dict)

# 键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行，如下实例：
# dict1 = {('name'):'Tom'}
# print(dict1)
# dict1 = {['name']:'Tom'}  # 如果是列表，会报错TypeError: unhashable type: 'list'
# print(dict1)


'''
字典内置函数&方法
'''

# dict = {'name':'Tom','age':18,'sex':'男','sex':'女'}

# 遍历字典（key & value）：
# for i in dict.items():
#     print(i)

# print(dict)
# print(len(dict))                #计算字典元素个数，即键的总数。

# 输出字典，以可打印的字符串表示。
# print(str(dict))


# print('name' in dict)         #如果键在字典dict里返回true，否则返回false

# print(dict.items())           #以列表返回可遍历的(键, 值) 元组数组

# print(dict.keys())            #返回一个迭代器，可以使用 list() 来转换为列表
# print(dict.values())

# print(dict.pop('name'))       #删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。

# print(dict.popitem())        #随机返回并删除字典中的最后一对键和值。


'''
另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。
注意：
1、字典是一种映射类型，它的元素是键值对。
2、字典的关键字必须为不可变类型，且不能重复。
3、创建空字典使用 { }。
'''


#***********************************************************************************************************************

#温故而知新

'''
标准数据类型
Python3 中有六个标准的数据类型：
Number（数字）
String（字符串）
List（列表）
Tuple（元组）
Set（集合）
Dictionary（字典）

Python3 的六个标准数据类型中：
不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；
可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。

'''
# 不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；
# age = 100                       #数字类型
# str =  'Hello Word'             #字符串类型
# tuple = ('Tom','Jack','Rose','Toni')     #元组类型

# print('数字类型是：{}，\n字符串类型是：{}，\n元组类型是：{},\n他们的数据都不可该变。' .format(type(age),type(str),type(tuple)))           #查看变量类型

'''
字符串的截取的语法格式如下：
变量[头下标:尾下标]
字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。
'''
# print(str)          # 输出字符串
# print(str[0:-1])    # 输出第一个到倒数第二个的所有字符
# print(str[0])       # 输出字符串第一个字符
# print(str[2:5])     # 输出从第三个开始到第五个的字符
# print(str[2:])      # 输出从第三个开始的后的所有字符
# print(str[::2])      #步长，最后一个参数为步长，步长为几，就是格几个输出

'''
注意：
1、与字符串一样，元组的元素不能修改。
2、元组也可以被索引和切片，方法一样。
3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。
4、元组也可以使用+操作符进行拼接。

'''
# 元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。
# print (tuple)             # 输出完整元组
# print (tuple[0])          # 输出元组的第一个元素
# print (tuple[1:3])        # 输出从第二个元素开始到第三个元素
# print (tuple[2:])         # 输出从第三个元素开始的所有元素
# print(tuple[::2])




# 判断字符串、元组
# print('W' in str)
# print('Jack' in tuple)





#***********************************************************************************************************************

# 可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。

list = ['Tom','Jack','Rose','Tom']         #列表类型
set = {'Tom','Jack','Rose','Tom',99}          #集合，会去重
dict = {'name':'Tom','age':18,'sex':'男'}  #字典：1、字典是一种映射类型，它的元素是键值对。字典的关键字必须为不可变类型，且不能重复。创建空字典使用 { }。


print('list类型是：{},\nset类型是：{}，\ndict类型是：{}' .format(type(list),type(set),type(dict)))

# 读取元素

# 列表：变量[头下标:尾下标]   索引值以 0 为开始值，-1 为从末尾的开始位置。

# print (list)            # 输出完整列表
# print (list[0])         # 输出列表第一个元素
# print (list[1:3])       # 从第二个开始输出到第三个元素
# print (list[2:])        # 输出从第三个元素开始的所有元素
# print (list * 2)    # 输出两次列表
# print (list + list) # 连接列表

# 读取
# print(set)            # 输出完整集合
# print(dict)           # 输出完整字典
# print(dict['name'])   #访问字典里的值


# 更新列表
print('第一个元素为：',list[0])
list[0] = 'Tom1'
print("更新第一个元素为：",list[0])

# 删除列表元素
print("原始列表 : ", list)
del list[2]
print("删除第三个元素 : ", list)

# 判断元素是否存在列表中
print('Tom1' in list)





# 集合添加元素
# set.add('junwei')
# print(set)

#移除集合元素
# set.remove('junwei')
# print(set)

# 判断元素是否在集合中存在
# print("junwei" in set)


# 字典添加元素
# dict['id'] = 100
# print(dict)

# 修改字典
# dict['age'] = 19
# print(dict['age'])


# 删除字典元素
# del dict['name'] # 删除键 'name'
# print(dict)

# 判断字典
# print('sex' in  dict)    #如果键在字典dict里返回true，否则返回false


#***********************************************************************************************************************