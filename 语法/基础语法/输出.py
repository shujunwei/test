#!/usr/bin/env python
# -*- coding: UTF-8 -*-
'''
@Project ：test 
@File    ：输出.py
@Author  ：Administrator
@Date    ：2020/10/26 15:49 
'''

# 脚本式编程

# 输出字符串,引号内的为字符串，不管引号内为任何内容，都会原封不动的输出
# print('Hello Word')

# 输出计算
# print(100+100)

# 为了打印好看，可以做个优化
# print("100+100=",100+100)

# 输出变量
# name = 'Jack'
# print(name)



'''

引号内的为字符串，不管引号内为任何内容，都会原封不动的输出

如果要输出字符串，要加引号，单双都可以；

如果要数值计算，或者输出整形，无需引号；

如果输出变量，无需引号；

'''
# ----------------------------------------------------------------------------------------------------------------------
# Python 拼接字符串的几种方式

# 方式1，使用加号(+)连接，使用加号连接各个变量或者元素必须是字符串类型（<class 'str'>）
# 字符串拼接
# print('Tom'+ ' Hello')

# str_name1 = 'To'
# str_name2 = 'ny'
# str_name = str_name1 + str_name2
# print(str_name)

# 变量拼接
# print(str_name1 + str_name2)

# 变量+ 字符串拼接
# print(str_name + ' Hello')

# ----------------------------------------------------------------------------------------------------------------------


'''

什么叫格式化输出？
数据按照某种特殊的要求输出.

Python字符串格式化,格式化的操作有两种
一、使用%，常用的格式化
二、使用format函数（推荐）

'''

'''
使用%，常用的格式化
假如输入一个整数，希望整数按照十六进制，八进制输出，如果输入一个小数，希望小数保留后面2位数然后输出，或者以科学计数法的方式来输出小数。字符串的输出希望在十个格子内输出，或者左对齐，居中等等
 
python字符串格式化符号:
print() 函数使用以%开头的转换说明符对各种类型的数据进行格式化输出，具体请看下表。

Python 转换说明符

%d、%i  转换为带符号的十进制整数
%o      转换为带符号的八进制整数
%x、%X  转换为带符号的十六进制整数
%e      转化为科学计数法表示的浮点数（e 小写）
%E      转化为科学计数法表示的浮点数（E 大写）
%f、%F  转化为十进制浮点数
%g      智能选择使用 %f 或 %e 格式
%G      智能选择使用 %F 或 %E 格式
%c      格式化字符及其 ASCII 码
%r      使用 repr() 函数将表达式转换为字符串
%s      使用 str() 函数将表达式转换为字符串

'''


# 关于整数的格式化输出

# num01,num02=200,300
# print("八进制输出：0o%o,0o%o"%(num01,num02))
# print("十六进制输出：0x%x,0x%x"%(num01,num02))
# print("十进制输出：%d,%d"%(num01,num02))
# print("200的二进制输出：",bin(num01),"300的二进制输出为：",bin(num02))




# 浮点数输出
'''
%f 保留小数点后面六位有效数字，%.3f 保留三位小数
%e 保留小数点后面六位有效数字，指数形式输出。%.3e 保留3位小数位，使用科学计数法
%g 保留六位有效数字的前提下，使用小数方式，否则用科学计数法。%3g保留3位有效数字，使用小数或科学计数法
'''

# num01=123456.8912

# print("标准的模式：%f"%num01)
#
# print("保留两位有效数字：%.2f"%num01)
#
# print("e的标准模式：%e"%num01)
#
# print("e的留两位有效数字：%.2e"%num01)
#
# print("g的标准模式：%g"%num01) #如果是7位保留不了就用科学计数法表示
#
# print("g的留两位有效数字：%.2g"%num01)

# 字符串的格式化输出
'''
% s    标准输出
% 10s  右对齐，占位符10位
% -10s  左对齐，占位符10位
% .2s  截取2位字符串
% 10.2s10   占位符，截取两位字符串
'''


# str01 = "www.iLync.cn"
#
# print("s标准输出：%s" % str01)
#
# print("s的固定空间输出：%20s" % str01)  # 右对齐
#
# print("s的固定空间输出：%-20s" % str01)  # 左对齐
#
# print("s截取：%.3s" % str01)  # 截取前三个字符
#
# print("s截取：%10.3s" % str01)
#
# print("s截取：%-10.3s" % str01)



'''
使用format函数（推荐）
format函数可以接受不限个数的参数，位置也可以不按顺序
'''

# 普通用法，format中的参数，对应{}的依次替换

#例句：还有2天放假，我还在坚持学习Python
# print("还有{}天放假，我还在坚持学习{}".format(2, "Python"))


# 设置位置（索引）格式化，format函数中，按索引的参数替换字符串
#类似索引的格式化，比如，快放假了，我在学习python，我想赶紧回家
# print("快放假了，{0}在学习{1}，{0}想赶紧回家".format("我", 'Python'))

# 指定替换参数的值
#张三坚持学习Python, 取得了优异样的成绩
# str = "{who}坚持学习{language}, 取得了{what}的成绩".format(who="张三", language="Python", what="优异")
# print(str)


'''

数字	     格式	输出	描述
3.1415926	{:.2f}	3.14	保留小数点后两位
3.1415926	{:+.2f}	+3.14	带符号保留小数点后两位
-1	        {:+.2f}	-1.00	带符号保留小数点后两位
2.71828	    {:.0f}	3	    不带小数
5	        {:0>2d}	05	    数字补零 (填充左边, 宽度为2)
5	        {:x<4d}	5xxx	数字补x (填充右边, 宽度为4)
10	        {:x<4d}	10xx	数字补x (填充右边, 宽度为4)
1000000	    {:,}	1,000,000	以逗号分隔的数字格式
0.25	    {:.2%}	25.00%	百分比格式
1000000000	{:.2e}	1.00e+09	指数记法
13	        {:>10d}	        13	右对齐 (默认, 宽度为10)
13	        {:<10d}	13	左对齐 (宽度为10)
13	        {:^10d}	    13	中间对齐 (宽度为10)

'''


# ----------------------------------------------------------------------------------------------------------------------

'''

Python转义字符
在 Python 中单引号（或双引号）是有特殊作用的，它们常作为字符（或字符串）的标识（只要数据用引号括起来，就认定这是字符或字符串），
而如果字符串中包含引号（例如 'I'm a coder'），为了避免解释器将字符串中的引号误认为是包围字符串的“结束”引号，就需要对字符串中的单引号进行转义，
使其在此处取消它本身具有的含义，告诉解释器这就是一个普通字符。

因此这里需要使用单引号 ' 的转义字符 \'，尽管它由 2 个字符组成，但通常将它看做是一个整体，是一个转义字符。我们已经见过很多类似的转义字符，包括 \'、\"、\\ 等。


 Python 支持的转义字符
转义字符	   说明
\	           在行尾的续行符，即一行未完，转到下一行继续写
\'	           单引号
\"	           双引号
\0	           空
\n	           换行符
\r	           回车符
\t	           水平制表符，用于横向跳到下一制表位
\a	           响铃
\b	           退格（Backspace）
\\	           反斜线
\0dd	       八进制数，dd 代表字符，如 \012 代表换行
\ xhh	       十六进制数，hh 代表字符，如 \x0a 代表换行

'''

# 掌握了上面的转义字符之后，下面在字符串中使用它们，例如如下代码：
# s = 'Hello\nCharlie\nGood\nMorning'
# print(s)


# 也可以使用制表符进行分隔，例如如下代码：
# s2 = '商品名\t\t\t\t单价\t\t数量\t\t总价'
# s3 = 'C语言小白变怪兽\t\t99\t\t\t2\t\t\t198'
# print(s2)
# print (s3)



# ----------------------------------------------------------------------------------------------------------------------


# 温故而知新


# 打印字符串，（引号内的字符串会原封不动的打印出来）
# print('你好，世界')
# ----------------------------------------------------------------------------------------------------------------------

# 打印变量。（打印变量不需要加引号）

# name = '吴亦凡'
# print(name)

# ----------------------------------------------------------------------------------------------------------------------

# 字符串拼接
# print('hello''python')
# name = 'Jack'
# print("Hello"+ name)

# ----------------------------------------------------------------------------------------------------------------------

# 格式化

# 使用%，常用的格式化
# str01 = "www.baidu.com"
# print("s标准输出：%s" % str01)
# print("s的固定空间输出：%20s" % str01)  # 右对齐
# print("s的固定空间输出：%-20s" % str01)  # 左对齐
# print("s截取：%.3s" % str01)  # 截取前三个字符

# ----------------------------------------------------------------------------------------------------------------------

# 使用format函数（推荐）
# format函数可以接受不限个数的参数，位置也可以不按顺序

# 普通用法，format中的参数，对应{}的依次替换

#例句：还有2天放假，我还在坚持学习Python
# print("还有{}天放假，我还在坚持学习{}".format(2, "Python"))


# 设置位置（索引）格式化，format函数中，按索引的参数替换字符串
#类似索引的格式化，比如，快放假了，我在学习python，我想赶紧回家
# print("快放假了，{0}在学习{1}，{0}想赶紧回家".format("我", 'Python'))

# 指定替换参数的值
#张三坚持学习Python, 取得了优异样的成绩
# str = "{who}坚持学习{language}, 取得了{what}的成绩".format(who="张三", language="Python", what="优异")
# print(str)
# ----------------------------------------------------------------------------------------------------------------------

# Python转义字符
# s = 'Hello\nCharlie\nGood\nMorning'
# print(s)

# 不转义
# r:非转义的原始字符串
# 而如果是以r开头，那么说明后面的字符，都是普通的字符了。
# s = r'Hello\nCharlie\nGood\nMorning'
# print(s)